--- authnzerver/tests/test_auth_permissions.py	2022-02-02 14:39:05.977568648 +0000
+++ authnzerver/tests/test_auth_permissions_processedpatch_1b5340b3135.py	2022-02-03 10:31:15.444820042 +0000
@@ -21,6 +21,33 @@ def get_test_authdb():
 
 
 def test_role_permissions():
+    user_payload = {'full_name': 'Test User', 'email': 'testuser-sessiondelete@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
+    user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
+    emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
+    assert (emailverify['success'] is True)
+    assert (emailverify['user_role'] == 'authenticated')
+    session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
+    session_token1 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
+    session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Searchzilla Oxide', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.2', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
+    session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
+    session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Pear Adventure', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.3', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
+    session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
+    sessions_killed = actions.auth_delete_sessions_userid({'user_id': emailverify['user_id'], 'session_token': session_token3['session_token'], 'keep_current_session': True, 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
+    assert (sessions_killed['success'] is True)
+    session_check_1 = actions.auth_session_exists({'session_token': session_token1['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
+    assert (session_check_1['success'] is False)
+    session_check_2 = actions.auth_session_exists({'session_token': session_token2['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
+    assert (session_check_2['success'] is False)
+    session_check_3 = actions.auth_session_exists({'session_token': session_token3['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
+    assert (session_check_3['success'] is True)
+    currproc = mp.current_process()
+    if getattr(currproc, 'authdb_engine', None):
+        currproc.authdb_engine.dispose()
+        del currproc.authdb_engine
+    try:
+        os.remove('test-sessiondelete.authdb.sqlite')
+    except Exception:
+        pass
     '''
     This tests if we can check the permissions for a logged-in user.
 
