{"target": "authnzerver/tests/test_auth_permissions.py::test_role_permissions", "type": "victim", "patch": true, "polluter": {"authnzerver/tests/test_auth_creation.py::test_create_user": [{"cleaner": "authnzerver/tests/test_apikey_nosession.py::test_issue_apikey", "patch": null}, {"cleaner": "authnzerver/tests/test_apikey_nosession.py::test_verify_apikey", "patch": null}, {"cleaner": "authnzerver/tests/test_apikey_nosession.py::test_revoke_apikey", "patch": null}, {"cleaner": "authnzerver/tests/test_apikey_nosession.py::test_revoke_all_apikeys", "patch": null}, {"cleaner": "authnzerver/tests/test_apikey_nosession.py::test_refresh_apikey", "patch": null}, {"cleaner": "authnzerver/tests/test_auth_deletesessions.py::test_sessions_delete_userid", "patch": {"diff": "23a24,50\n>     user_payload = {'full_name': 'Test User', 'email': 'testuser-sessiondelete@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}\n>     user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')\n>     emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')\n>     assert (emailverify['success'] is True)\n>     assert (emailverify['user_role'] == 'authenticated')\n>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}\n>     session_token1 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')\n>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Searchzilla Oxide', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.2', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}\n>     session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')\n>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Pear Adventure', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.3', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}\n>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')\n>     sessions_killed = actions.auth_delete_sessions_userid({'user_id': emailverify['user_id'], 'session_token': session_token3['session_token'], 'keep_current_session': True, 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')\n>     assert (sessions_killed['success'] is True)\n>     session_check_1 = actions.auth_session_exists({'session_token': session_token1['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')\n>     assert (session_check_1['success'] is False)\n>     session_check_2 = actions.auth_session_exists({'session_token': session_token2['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')\n>     assert (session_check_2['success'] is False)\n>     session_check_3 = actions.auth_session_exists({'session_token': session_token3['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')\n>     assert (session_check_3['success'] is True)\n>     currproc = mp.current_process()\n>     if getattr(currproc, 'authdb_engine', None):\n>         currproc.authdb_engine.dispose()\n>         del currproc.authdb_engine\n>     try:\n>         os.remove('test-sessiondelete.authdb.sqlite')\n>     except Exception:\n>         pass\n", "patched_test_file": "ipflakies_result/63a3dffe/patch/test_auth_permissions_PatchProcessed_1b5340b3.py#", "patch_file": "ipflakies_result/63a3dffe/patch/test_auth_permissions_patch_1b5340b3.patch", "time": 732.2021039320098, "fixed_polluter(s)": []}}, {"cleaner": "authnzerver/tests/test_auth_lockuser.py::test_user_lock", "patch": {"diff": "23a24,52\n>     user_payload = {'full_name': 'Test User', 'email': 'testuser-userlock@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}\n>     user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')\n>     emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')\n>     assert (emailverify['success'] is True)\n>     assert (emailverify['user_role'] == 'authenticated')\n>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}\n>     session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')\n>     assert (session_token2['success'] is True)\n>     assert (session_token2['session_token'] is not None)\n>     user_locked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'lock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)\n>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')\n>     assert (session_token3['success'] is True)\n>     assert (session_token3['session_token'] is not None)\n>     login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')\n>     assert (login['success'] is False)\n>     user_unlocked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'unlock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)\n>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')\n>     assert (session_token3['success'] is True)\n>     assert (session_token3['session_token'] is not None)\n>     login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')\n>     assert (login['success'] is True)\n>     currproc = mp.current_process()\n>     if getattr(currproc, 'authdb_engine', None):\n>         currproc.authdb_engine.dispose()\n>         del currproc.authdb_engine\n>     try:\n>         os.remove('test-userlock.authdb.sqlite')\n>     except Exception:\n>         pass\n", "patched_test_file": "ipflakies_result/63a3dffe/patch/test_auth_permissions_PatchProcessed_22479437.py#", "patch_file": "ipflakies_result/63a3dffe/patch/test_auth_permissions_patch_22479437.patch", "time": 786.6197298580082, "fixed_polluter(s)": []}}, {"cleaner": "authnzerver/tests/test_auth_passcheck.py::test_passcheck", "patch": {"diff": "23a24,32\n>     user_payload = {'full_name': 'Test User', 'email': 'testuser-passcheck@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}\n>     currproc = mp.current_process()\n>     if getattr(currproc, 'authdb_engine', None):\n>         currproc.authdb_engine.dispose()\n>         del currproc.authdb_engine\n>     try:\n>         os.remove('test-passcheck.authdb.sqlite')\n>     except Exception:\n>         pass\n", "patched_test_file": "ipflakies_result/63a3dffe/patch/test_auth_permissions_PatchProcessed_02380cb7.py#", "patch_file": "ipflakies_result/63a3dffe/patch/test_auth_permissions_patch_02380cb7.patch", "time": 913.9786164480029, "fixed_polluter(s)": ["authnzerver/tests/test_auth_creation.py::test_create_user", "authnzerver/tests/test_auth_login.py::test_login", "authnzerver/tests/test_auth_loginlogout.py::test_login_logout"]}}], "authnzerver/tests/test_auth_login.py::test_login": [], "authnzerver/tests/test_auth_loginlogout.py::test_login_logout": []}, "time": 16677.21555662155}