--- authnzerver/tests/test_auth_creation.py	2022-02-02 14:39:05.977568648 +0000
+++ authnzerver/tests/test_auth_creation_processedpatch_22479437132.py	2022-02-03 05:29:39.900267429 +0000
@@ -22,6 +22,35 @@ def get_test_authdb():
 
 
 def test_create_user():
+    user_payload = {'full_name': 'Test User', 'email': 'testuser-userlock@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
+    user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
+    emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
+    assert (emailverify['success'] is True)
+    assert (emailverify['user_role'] == 'authenticated')
+    session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
+    session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
+    assert (session_token2['success'] is True)
+    assert (session_token2['session_token'] is not None)
+    user_locked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'lock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)
+    session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
+    assert (session_token3['success'] is True)
+    assert (session_token3['session_token'] is not None)
+    login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
+    assert (login['success'] is False)
+    user_unlocked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'unlock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)
+    session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
+    assert (session_token3['success'] is True)
+    assert (session_token3['session_token'] is not None)
+    login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
+    assert (login['success'] is True)
+    currproc = mp.current_process()
+    if getattr(currproc, 'authdb_engine', None):
+        currproc.authdb_engine.dispose()
+        del currproc.authdb_engine
+    try:
+        os.remove('test-userlock.authdb.sqlite')
+    except Exception:
+        pass
     '''
     This runs through various iterations of creating a user.
 
