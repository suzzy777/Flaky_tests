{"target": "tests/test_propagation_logger.py::test_forcing_level_by_dict", "type": "victim", "patch": true, "polluter": {"tests/test_propagation_logger.py::test_forcing_level_by_level_value": [{"cleaner": "tests/test_propagation_logger.py::test_level_propagation", "patch": {"diff": "1,128c1,140\n< import pytest\n< import logging\n< \n< \n< def test_forcing_level_by_level_value(propagation_logger, handler):\n<     msg = \"TEST\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logging.DEBUG)\n<     propagation_logger.debug(msg)\n<     record = handler.pop()\n< \n<     assert record.msg == msg\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_by_level_name(propagation_logger, handler):\n<     msg = \"TEST\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))\n<     propagation_logger.debug(msg)\n<     record = handler.pop()\n<     assert record.msg == msg\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_level_propagation(propagation_logger, handler):\n<     msg1 = \"TEST1\"\n<     msg2 = \"TEST2\"\n<     propagation_logger.set_propagation(True)\n<     propagation_logger.setLevel(logging.INFO)\n< \n<     def test_second_level():\n<         propagation_logger.debug(msg2)\n< \n<     @propagation_logger.level_propagation(logging.DEBUG)\n<     def test_first_level():\n<         propagation_logger.debug(msg1)\n<         test_second_level()\n< \n<     test_first_level()\n<     test_second_level()\n< \n<     record2 = handler.pop()\n<     record1 = handler.pop()\n<     assert record1.levelname == logging.getLevelName(logging.DEBUG)\n<     assert record2.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_reset_level(propagation_logger, handler):\n<     msg = \"TEST\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))\n<     propagation_logger.reset_level()\n<     propagation_logger.debug(msg)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):\n<     msg1 = \"TEST1\"\n<     msg2 = \"TEST2\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logger_1=logging.DEBUG)\n<     additional_logger = logging.getLogger('logger_1')\n<     additional_logger.setLevel(logging.INFO)\n<     additional_logger.addHandler(handler)\n<     propagation_logger.debug(msg1)\n<     additional_logger.debug(msg2)\n<     record = handler.pop()\n<     assert record.msg == msg2\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):\n<     msg1 = \"TEST1\"\n<     msg2 = \"TEST2\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logger_1=\"DEBUG\")\n<     additional_logger = logging.getLogger('logger_1')\n<     additional_logger.setLevel(logging.INFO)\n<     additional_logger.addHandler(handler)\n<     propagation_logger.debug(msg1)\n<     additional_logger.debug(msg2)\n<     record = handler.pop()\n<     assert record.msg == msg2\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_by_dict(propagation_logger, handler):\n<     msg1 = \"TEST1\"\n<     msg2 = \"TEST2\"\n<     propagation_logger.setLevel(logging.INFO)\n<     levels = {\n<             'logger_1': logging.DEBUG\n<         }\n<     propagation_logger.force_level(levels)\n<     additional_logger = logging.getLogger('logger_1')\n<     additional_logger.setLevel(logging.INFO)\n<     additional_logger.addHandler(handler)\n<     propagation_logger.debug(msg1)\n<     additional_logger.debug(msg2)\n<     record = handler.pop()\n<     assert record.msg == msg2\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_without_args_and_kwargs(propagation_logger, handler):\n<     with pytest.raises(TypeError) as exc_info:\n<         propagation_logger.force_level()\n<     assert '0 given' in str(exc_info.value)\n< \n< \n< def test_forcing_level_with_too_many_args(propagation_logger, handler):\n<     with pytest.raises(TypeError) as exc_info:\n<         propagation_logger.force_level(logging.DEBUG, logging.DEBUG)\n<     assert '2 given' in str(exc_info.value)\n---\n> import pytest\n> import logging\n> \n> \n> def test_forcing_level_by_level_value(propagation_logger, handler):\n>     msg = \"TEST\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logging.DEBUG)\n>     propagation_logger.debug(msg)\n>     record = handler.pop()\n> \n>     assert record.msg == msg\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_by_level_name(propagation_logger, handler):\n>     msg = \"TEST\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))\n>     propagation_logger.debug(msg)\n>     record = handler.pop()\n>     assert record.msg == msg\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_level_propagation(propagation_logger, handler):\n>     msg1 = \"TEST1\"\n>     msg2 = \"TEST2\"\n>     propagation_logger.set_propagation(True)\n>     propagation_logger.setLevel(logging.INFO)\n> \n>     def test_second_level():\n>         propagation_logger.debug(msg2)\n> \n>     @propagation_logger.level_propagation(logging.DEBUG)\n>     def test_first_level():\n>         propagation_logger.debug(msg1)\n>         test_second_level()\n> \n>     test_first_level()\n>     test_second_level()\n> \n>     record2 = handler.pop()\n>     record1 = handler.pop()\n>     assert record1.levelname == logging.getLevelName(logging.DEBUG)\n>     assert record2.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_reset_level(propagation_logger, handler):\n>     msg = \"TEST\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))\n>     propagation_logger.reset_level()\n>     propagation_logger.debug(msg)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):\n>     msg1 = \"TEST1\"\n>     msg2 = \"TEST2\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logger_1=logging.DEBUG)\n>     additional_logger = logging.getLogger('logger_1')\n>     additional_logger.setLevel(logging.INFO)\n>     additional_logger.addHandler(handler)\n>     propagation_logger.debug(msg1)\n>     additional_logger.debug(msg2)\n>     record = handler.pop()\n>     assert record.msg == msg2\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):\n>     msg1 = \"TEST1\"\n>     msg2 = \"TEST2\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logger_1=\"DEBUG\")\n>     additional_logger = logging.getLogger('logger_1')\n>     additional_logger.setLevel(logging.INFO)\n>     additional_logger.addHandler(handler)\n>     propagation_logger.debug(msg1)\n>     additional_logger.debug(msg2)\n>     record = handler.pop()\n>     assert record.msg == msg2\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_by_dict(propagation_logger, handler):\n>     msg1 = 'TEST1'\n>     msg2 = 'TEST2'\n> \n>     def test_second_level():\n>         propagation_logger.debug(msg2)\n> \n>     @propagation_logger.level_propagation(logging.DEBUG)\n>     def test_first_level():\n>         propagation_logger.debug(msg1)\n>         test_second_level()\n>     test_first_level()\n>     record2 = handler.pop()\n>     msg1 = \"TEST1\"\n>     msg2 = \"TEST2\"\n>     propagation_logger.setLevel(logging.INFO)\n>     levels = {\n>             'logger_1': logging.DEBUG\n>         }\n>     propagation_logger.force_level(levels)\n>     additional_logger = logging.getLogger('logger_1')\n>     additional_logger.setLevel(logging.INFO)\n>     additional_logger.addHandler(handler)\n>     propagation_logger.debug(msg1)\n>     additional_logger.debug(msg2)\n>     record = handler.pop()\n>     assert record.msg == msg2\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_without_args_and_kwargs(propagation_logger, handler):\n>     with pytest.raises(TypeError) as exc_info:\n>         propagation_logger.force_level()\n>     assert '0 given' in str(exc_info.value)\n> \n> \n> def test_forcing_level_with_too_many_args(propagation_logger, handler):\n>     with pytest.raises(TypeError) as exc_info:\n>         propagation_logger.force_level(logging.DEBUG, logging.DEBUG)\n>     assert '2 given' in str(exc_info.value)\n", "patched_test_file": "ipflakies_result/56100062/patch/test_propagation_logger_PatchProcessed_54a65526.py#", "patch_file": "ipflakies_result/56100062/patch/test_propagation_logger_patch_54a65526.patch", "time": 10.235386587999528, "fixed_polluter(s)": []}}, {"cleaner": "tests/test_propagation_logger.py::test_reset_level", "patch": {"diff": "1,128c1,129\n< import pytest\n< import logging\n< \n< \n< def test_forcing_level_by_level_value(propagation_logger, handler):\n<     msg = \"TEST\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logging.DEBUG)\n<     propagation_logger.debug(msg)\n<     record = handler.pop()\n< \n<     assert record.msg == msg\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_by_level_name(propagation_logger, handler):\n<     msg = \"TEST\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))\n<     propagation_logger.debug(msg)\n<     record = handler.pop()\n<     assert record.msg == msg\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_level_propagation(propagation_logger, handler):\n<     msg1 = \"TEST1\"\n<     msg2 = \"TEST2\"\n<     propagation_logger.set_propagation(True)\n<     propagation_logger.setLevel(logging.INFO)\n< \n<     def test_second_level():\n<         propagation_logger.debug(msg2)\n< \n<     @propagation_logger.level_propagation(logging.DEBUG)\n<     def test_first_level():\n<         propagation_logger.debug(msg1)\n<         test_second_level()\n< \n<     test_first_level()\n<     test_second_level()\n< \n<     record2 = handler.pop()\n<     record1 = handler.pop()\n<     assert record1.levelname == logging.getLevelName(logging.DEBUG)\n<     assert record2.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_reset_level(propagation_logger, handler):\n<     msg = \"TEST\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))\n<     propagation_logger.reset_level()\n<     propagation_logger.debug(msg)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):\n<     msg1 = \"TEST1\"\n<     msg2 = \"TEST2\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logger_1=logging.DEBUG)\n<     additional_logger = logging.getLogger('logger_1')\n<     additional_logger.setLevel(logging.INFO)\n<     additional_logger.addHandler(handler)\n<     propagation_logger.debug(msg1)\n<     additional_logger.debug(msg2)\n<     record = handler.pop()\n<     assert record.msg == msg2\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):\n<     msg1 = \"TEST1\"\n<     msg2 = \"TEST2\"\n<     propagation_logger.setLevel(logging.INFO)\n<     propagation_logger.force_level(logger_1=\"DEBUG\")\n<     additional_logger = logging.getLogger('logger_1')\n<     additional_logger.setLevel(logging.INFO)\n<     additional_logger.addHandler(handler)\n<     propagation_logger.debug(msg1)\n<     additional_logger.debug(msg2)\n<     record = handler.pop()\n<     assert record.msg == msg2\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_by_dict(propagation_logger, handler):\n<     msg1 = \"TEST1\"\n<     msg2 = \"TEST2\"\n<     propagation_logger.setLevel(logging.INFO)\n<     levels = {\n<             'logger_1': logging.DEBUG\n<         }\n<     propagation_logger.force_level(levels)\n<     additional_logger = logging.getLogger('logger_1')\n<     additional_logger.setLevel(logging.INFO)\n<     additional_logger.addHandler(handler)\n<     propagation_logger.debug(msg1)\n<     additional_logger.debug(msg2)\n<     record = handler.pop()\n<     assert record.msg == msg2\n<     assert record.levelname == logging.getLevelName(logging.DEBUG)\n<     with pytest.raises(IndexError):\n<         handler.pop()\n< \n< \n< def test_forcing_level_without_args_and_kwargs(propagation_logger, handler):\n<     with pytest.raises(TypeError) as exc_info:\n<         propagation_logger.force_level()\n<     assert '0 given' in str(exc_info.value)\n< \n< \n< def test_forcing_level_with_too_many_args(propagation_logger, handler):\n<     with pytest.raises(TypeError) as exc_info:\n<         propagation_logger.force_level(logging.DEBUG, logging.DEBUG)\n<     assert '2 given' in str(exc_info.value)\n---\n> import pytest\n> import logging\n> \n> \n> def test_forcing_level_by_level_value(propagation_logger, handler):\n>     msg = \"TEST\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logging.DEBUG)\n>     propagation_logger.debug(msg)\n>     record = handler.pop()\n> \n>     assert record.msg == msg\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_by_level_name(propagation_logger, handler):\n>     msg = \"TEST\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))\n>     propagation_logger.debug(msg)\n>     record = handler.pop()\n>     assert record.msg == msg\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_level_propagation(propagation_logger, handler):\n>     msg1 = \"TEST1\"\n>     msg2 = \"TEST2\"\n>     propagation_logger.set_propagation(True)\n>     propagation_logger.setLevel(logging.INFO)\n> \n>     def test_second_level():\n>         propagation_logger.debug(msg2)\n> \n>     @propagation_logger.level_propagation(logging.DEBUG)\n>     def test_first_level():\n>         propagation_logger.debug(msg1)\n>         test_second_level()\n> \n>     test_first_level()\n>     test_second_level()\n> \n>     record2 = handler.pop()\n>     record1 = handler.pop()\n>     assert record1.levelname == logging.getLevelName(logging.DEBUG)\n>     assert record2.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_reset_level(propagation_logger, handler):\n>     msg = \"TEST\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))\n>     propagation_logger.reset_level()\n>     propagation_logger.debug(msg)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):\n>     msg1 = \"TEST1\"\n>     msg2 = \"TEST2\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logger_1=logging.DEBUG)\n>     additional_logger = logging.getLogger('logger_1')\n>     additional_logger.setLevel(logging.INFO)\n>     additional_logger.addHandler(handler)\n>     propagation_logger.debug(msg1)\n>     additional_logger.debug(msg2)\n>     record = handler.pop()\n>     assert record.msg == msg2\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):\n>     msg1 = \"TEST1\"\n>     msg2 = \"TEST2\"\n>     propagation_logger.setLevel(logging.INFO)\n>     propagation_logger.force_level(logger_1=\"DEBUG\")\n>     additional_logger = logging.getLogger('logger_1')\n>     additional_logger.setLevel(logging.INFO)\n>     additional_logger.addHandler(handler)\n>     propagation_logger.debug(msg1)\n>     additional_logger.debug(msg2)\n>     record = handler.pop()\n>     assert record.msg == msg2\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_by_dict(propagation_logger, handler):\n>     propagation_logger.reset_level()\n>     msg1 = \"TEST1\"\n>     msg2 = \"TEST2\"\n>     propagation_logger.setLevel(logging.INFO)\n>     levels = {\n>             'logger_1': logging.DEBUG\n>         }\n>     propagation_logger.force_level(levels)\n>     additional_logger = logging.getLogger('logger_1')\n>     additional_logger.setLevel(logging.INFO)\n>     additional_logger.addHandler(handler)\n>     propagation_logger.debug(msg1)\n>     additional_logger.debug(msg2)\n>     record = handler.pop()\n>     assert record.msg == msg2\n>     assert record.levelname == logging.getLevelName(logging.DEBUG)\n>     with pytest.raises(IndexError):\n>         handler.pop()\n> \n> \n> def test_forcing_level_without_args_and_kwargs(propagation_logger, handler):\n>     with pytest.raises(TypeError) as exc_info:\n>         propagation_logger.force_level()\n>     assert '0 given' in str(exc_info.value)\n> \n> \n> def test_forcing_level_with_too_many_args(propagation_logger, handler):\n>     with pytest.raises(TypeError) as exc_info:\n>         propagation_logger.force_level(logging.DEBUG, logging.DEBUG)\n>     assert '2 given' in str(exc_info.value)\n", "patched_test_file": "ipflakies_result/56100062/patch/test_propagation_logger_PatchProcessed_8633acad.py#", "patch_file": "ipflakies_result/56100062/patch/test_propagation_logger_patch_8633acad.patch", "time": 4.977761276008096, "fixed_polluter(s)": ["tests/test_propagation_logger.py::test_forcing_level_by_level_value", "tests/test_propagation_logger.py::test_forcing_level_by_level_name"]}}], "tests/test_propagation_logger.py::test_forcing_level_by_level_name": []}, "time": 76.34028124809265}